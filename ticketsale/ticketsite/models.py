from django.db import models
from django.contrib.auth.models import AbstractUser

# –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(AbstractUser):
    ROLE_CHOICES = [
        ('user', '–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
        ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
    ]
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')

    groups = models.ManyToManyField(
        'auth.Group',
        verbose_name='groups',
        blank=True,
        help_text='The groups this user belongs to.',
        related_name='ticketsite_user_set',
        related_query_name='user',
    )
    user_permissions = models.ManyToManyField(
        'auth.Permission',
        verbose_name='user permissions',
        blank=True,
        help_text='Specific permissions for this user.',
        related_name='ticketsite_user_set',
        related_query_name='user',
    )

    def __str__(self):
        return self.username
    
# –ì–æ—Ä–æ–¥–∞
class City(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name

# –ú–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
class Place(models.Model):
    name = models.CharField(max_length=200)
    address = models.CharField(max_length=200)
    city = models.ForeignKey(City, on_delete=models.CASCADE)

    def __str__(self):
        return f"{self.name} ({self.city})"

# –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
class Event(models.Model):
    TYPE_CHOICES = [
        ('cinema', '–ö–∏–Ω–æ'),
        ('theatre', '–¢–µ–∞—Ç—Ä'),
        ('concert', '–ö–æ–Ω—Ü–µ—Ä—Ç'),
    ]
    title = models.CharField(max_length=200)
    description = models.TextField()
    short_description = models.CharField(max_length=300, blank=True)  
    type = models.CharField(max_length=10, choices=TYPE_CHOICES)
    date_time = models.DateTimeField()
    place = models.ForeignKey(Place, on_delete=models.CASCADE)
    image = models.ImageField(upload_to='events/', blank=True, null=True)  
    min_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)

    def __str__(self):
        return f"{self.title} ({self.get_type_display()})"
    
    def get_type_icon(self):
        icons = {
            'cinema': 'üé¨',
            'theatre': 'üé≠',
            'concert': 'üéµ'
        }
        return icons.get(self.type, '')

# –ë–∏–ª–µ—Ç—ã
class Ticket(models.Model):
    STATUS_CHOICES = [
        ('available', '–î–æ—Å—Ç—É–ø–µ–Ω'),
        ('booked', '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'),
        ('sold', '–ü—Ä–æ–¥–∞–Ω'),
    ]
    event = models.ForeignKey(Event, on_delete=models.CASCADE)
    seat_number = models.CharField(max_length=10)
    price = models.DecimalField(max_digits=10, decimal_places=2)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='available')

    def __str__(self):
        return f"–ë–∏–ª–µ—Ç –Ω–∞ {self.event} (–º–µ—Å—Ç–æ {self.seat_number})"

# –ó–∞–∫–∞–∑—ã
class Order(models.Model):
    PAYMENT_STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã'),
        ('paid', '–û–ø–ª–∞—á–µ–Ω'),
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    ticket = models.ForeignKey(Ticket, on_delete=models.CASCADE)
    order_date = models.DateTimeField(auto_now_add=True)
    payment_status = models.CharField(max_length=10, choices=PAYMENT_STATUS_CHOICES, default='pending')

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.id} ({self.user.username})"
